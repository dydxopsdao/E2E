name: Playwright Visual Tests with NordLayer Tunnel

on:
  workflow_dispatch:

jobs:
  visual-tests:
    name: Run Applitools Visual Tests
    runs-on: ubuntu-latest
    env:
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install dependencies for Xvfb
        run: sudo apt-get install -y xvfb

      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          sleep 2
          sudo chown -R runner:runner /run/nordlayer/
          sudo chmod 755 /run/nordlayer
          sudo chmod 666 /run/nordlayer/nordlayer.sock

      - name: Authenticate with NordLayer
        run: |
          nordlayer login \
            --email "${{ secrets.NORDLAYER_EMAIL }}" \
            --password "${{ secrets.NORDLAYER_PASSWORD }}" \
            --organization "dydxopsdao"

      - name: Connect to NordLayer Server
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"

      - name: Verify VPN Connection
        run: |
          echo "Verifying VPN IP..."
          sleep 10
          curl ifconfig.me

      - name: Start Xvfb
        run: |
          Xvfb :99 -ac &
          export DISPLAY=:99 >> $GITHUB_ENV
          sleep 3

      - name: Run Playwright tests with Applitools
        run: |
          # Run Playwright tests with multiple reporters:
          # - list: for console output
          # - junit: to produce a JUnit XML file (results.xml)
          # - html: to produce an HTML report (by default placed in the report folder)
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
            npx playwright test --reporter=list,junit,html
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

      - name: Debug NordLayer Status
        if: always()
        run: nordlayer status

      - name: Disconnect from NordLayer Server
        if: always()
        run: nordlayer disconnect || echo "Already disconnected"

      # Install Datadog CI CLI so we can upload test results
      - name: Install Datadog CI CLI
        run: npm install -g @datadog/datadog-ci

      # Upload the JUnit test results to Datadog.
      - name: Upload Test Results to Datadog
        if: always()
        run: datadog-ci junit upload results.xml
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: ap1.datadoghq.com

      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Analyze Test Failures with OpenAI
        id: analysis
        if: failure()
        run: |
          if [ -f playwright-report/results.txt ]; then
            RESULTS=$(cat playwright-report/results.txt)
          else
            RESULTS="No detailed test results found. Please check that the tests are generating output."
          fi
          PROMPT="Analyze the following test failures and provide a summary of likely causes and potential troubleshooting suggestions:\n\n$RESULTS"
          echo "Prompt: $PROMPT"
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": "'"$PROMPT"'"}],
              "max_tokens": 300,
              "temperature": 0.7
            }')
          ANALYSIS=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          echo "analysis=$ANALYSIS" >> $GITHUB_OUTPUT
          echo "OpenAI Analysis: $ANALYSIS"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Post Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
        run: |
          if [ "${JOB_STATUS}" = "success" ]; then
            MESSAGE="✅ Playwright Visual Tests Passed!\nDetails: $RUN_URL"
          else
            ANALYSIS_SUMMARY="${{ steps.analysis.outputs.analysis }}"
            MESSAGE="❌ Playwright Visual Tests Failed!\nOpenAI Analysis: ${ANALYSIS_SUMMARY}\nDetails: $RUN_URL"
          fi
          echo "Posting Slack message: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"${MESSAGE}\"}" \
            "$SLACK_WEBHOOK_URL"
