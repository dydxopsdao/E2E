name: E2E Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Vercel Deployment ID'
        required: false
        default: 'manual'

jobs:
  visual-tests:
    name: "E2E Tests (Deployment: ${{ inputs.deployment_id }})"
    runs-on: ubuntu-latest
    env:
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ap1.datadoghq.com
      DD_SERVICE: dydx.trade
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DYDX_MNEMONIC: ${{ secrets.DYDX_MNEMONIC }}
      DYDX_ADDRESS: ${{ secrets.DYDX_ADDRESS }}
      DYDX_NETWORK_TYPE: mainnet
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Log Event Details
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Deployment ID: ${{ inputs.deployment_id }}"
          echo "Full event payload: ${{ toJSON(github.event) }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          sleep 2
          sudo chown -R runner:runner /run/nordlayer/
          sudo chmod 755 /run/nordlayer
          sudo chmod 666 /run/nordlayer/nordlayer.sock

      - name: Fast NordLayer Setup
        run: |
          # Check if we can run a NordLayer command
          if ! nordlayer status &>/dev/null; then
            echo "Setting socket permissions..."
            sudo chmod -R 777 /run/nordlayer/
            if [ -S /run/nordlayer/nordlayer.sock ]; then
              sudo chmod 666 /run/nordlayer/nordlayer.sock
            fi
            
            # Quick service restart if needed
            if ! nordlayer status &>/dev/null; then
              sudo systemctl restart nordlayer.service
              sleep 2
            fi
          fi
          
          # Try login without retries first for speed
          echo "Authenticating with NordLayer..."
          if ! nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
            echo "Login failed on first attempt, fixing permissions and retrying once..."
            sudo chmod 666 /run/nordlayer/nordlayer.sock
            
            if ! nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
              echo "Login failed after second attempt, proceeding to recovery..."
              sudo systemctl restart nordlayer.service
              sleep 3
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              
              if ! nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
                echo "Failed to login after recovery"
                exit 1
              fi
            fi
          fi
          
          # Connect to VPN with faster retry logic
          DOS_SERVER_IP="94.101.112.199"
          DOS_SERVER_NAME="dos-server-BQG2cKQV"
          
          echo "Connecting to DOS server..."
          if ! nordlayer connect "$DOS_SERVER_NAME"; then
            echo "First connection attempt failed, retrying with delay..."
            sleep 2
            
            if ! nordlayer connect "$DOS_SERVER_NAME"; then
              echo "Second connection attempt failed, trying with service restart..."
              sudo systemctl restart nordlayer.service
              sleep 3
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              
              if ! nordlayer connect "$DOS_SERVER_NAME"; then
                echo "Failed to connect after recovery"
                exit 1
              fi
            fi
          fi
          
          # Quick verification that we're connected through the correct IP
          echo "Verifying connection..."
          sleep 3 # Minimal wait for connection to establish
          
          # Verify correct IP - just check this once for speed
          CURRENT_IP=$(curl -s --max-time 5 ifconfig.me)
          echo "Current IP: $CURRENT_IP (Expected: $DOS_SERVER_IP)"
          
          if [ "$CURRENT_IP" = "$DOS_SERVER_IP" ]; then
            echo "✅ Successfully connected to DOS server with correct IP"
          else
            echo "❌ Connected, but IP doesn't match DOS server IP"
            echo "Attempting quick reconnection..."
            nordlayer disconnect &>/dev/null || true
            sleep 1
            
            if nordlayer connect "$DOS_SERVER_NAME"; then
              sleep 3
              CURRENT_IP=$(curl -s --max-time 5 ifconfig.me)
              
              if [ "$CURRENT_IP" = "$DOS_SERVER_IP" ]; then
                echo "✅ Successfully connected on second attempt"
              else
                echo "❌ Failed to connect through correct IP"
                exit 1
              fi
            else
              echo "❌ Failed to reconnect"
              exit 1
            fi
          fi
          
          # Simplified health check
          echo "Running minimal health check..."
          if ! ip route | grep -q nordlayer; then
            echo "❌ No NordLayer routes found in routing table"
            exit 1
          fi
          
          if ! ping -c 2 -W 2 trade.dydx.exchange &>/dev/null; then
            echo "❌ Cannot ping dYdX domain"
            exit 1
          fi
          
          echo "✅ VPN connection established successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install dependencies for Xvfb
        run: sudo apt-get install -y xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -ac &>/dev/null &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      - name: Monitor VPN Connection During Tests
        run: |
          # Start background monitoring process
          (
            while true; do
              echo "$(date): Running periodic VPN health check..."
              ./.github/scripts/vpn-health-check.sh > /dev/null || echo "⚠️ VPN health check failed during test execution"
              sleep 120  # Check every 2 minutes
            done
          ) &
          MONITOR_PID=$!
          echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_ENV
          
      - name: Run Playwright tests with Applitools and network resilience
        run: |
          # Create a wrapper script for test execution with network checks
          cat > run-tests-with-resilience.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          MAX_RETRIES=2
          RETRY_COUNT=0
          LAST_CHECKPOINT=0
          DOS_SERVER_IP="94.101.112.199"
          DOS_SERVER_NAME="dos-server-BQG2cKQV"
          
          # Fast IP verification function
          verify_dos_server_ip() {
            CURRENT_IP=$(curl -s --max-time 3 ifconfig.me)
            
            if [ -z "$CURRENT_IP" ]; then
              echo "❌ Failed to get current IP"
              return 1
            elif [ "$CURRENT_IP" = "$DOS_SERVER_IP" ]; then
              echo "✅ Connected through correct DOS server IP"
              return 0
            else
              echo "❌ Not connected through DOS server. Current IP: $CURRENT_IP"
              return 1
            fi
          }
          
          # Fast socket repair
          repair_nordlayer() {
            # Check socket permissions
            if [ ! -S /run/nordlayer/nordlayer.sock ] || [ ! -r /run/nordlayer/nordlayer.sock ]; then
              sudo chmod -R 777 /run/nordlayer/
              sudo systemctl restart nordlayer.service
              sleep 1
              
              # Set socket permissions if it exists now
              if [ -S /run/nordlayer/nordlayer.sock ]; then
                sudo chmod 666 /run/nordlayer/nordlayer.sock
              fi
            fi
            
            # Try a basic command
            if nordlayer status &>/dev/null; then
              # Quick reconnect if needed
              if ! verify_dos_server_ip; then
                nordlayer disconnect >/dev/null 2>&1 || true
                sleep 1
                nordlayer connect "$DOS_SERVER_NAME"
                sleep 2
                return verify_dos_server_ip
              fi
              return 0
            else
              return 1
            fi
          }
          
          # Quick VPN check
          check_vpn_before_continuing() {
            # Verify we're using the DOS server IP
            if ! verify_dos_server_ip; then
              nordlayer disconnect >/dev/null 2>&1 || true
              sleep 1
              nordlayer connect "$DOS_SERVER_NAME"
              sleep 2
              
              if ! verify_dos_server_ip; then
                return 1
              fi
            fi
            
            # Quick check for socket permission issues
            if ! nordlayer status &>/dev/null; then
              if ! repair_nordlayer; then
                return 1
              fi
            fi
            
            # Minimal routing check
            if ! ip route | grep -q nordlayer; then
              return 1
            fi
            
            return 0
          }
          
          # Run the tests with minimal VPN checks
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Quick VPN check
            if ! check_vpn_before_continuing; then
              echo "VPN connection issue, quick reconnection attempt"
              
              # Fast reconnect
              nordlayer disconnect >/dev/null 2>&1 || true
              sleep 1
              nordlayer connect "$DOS_SERVER_NAME"
              sleep 2
              
              if ! check_vpn_before_continuing; then
                RETRY_COUNT=$((RETRY_COUNT+1))
                continue
              fi
            fi
            
            # Run the tests
            if [ $LAST_CHECKPOINT -eq 0 ]; then
              echo "Starting tests from beginning"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test
              TEST_EXIT_CODE=$?
            else
              echo "Resuming tests from checkpoint $LAST_CHECKPOINT"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test --repeat-each=1 --shard="$LAST_CHECKPOINT/2"
              TEST_EXIT_CODE=$?
            fi
            
            # Check if tests succeeded
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "Tests completed successfully!"
              exit 0
            fi
            
            # Tests failed, quick VPN check
            if ! check_vpn_before_continuing; then
              echo "Test failure may be due to VPN issues. Retry $((RETRY_COUNT+1))/$MAX_RETRIES"
              LAST_CHECKPOINT=$((LAST_CHECKPOINT+1))
              RETRY_COUNT=$((RETRY_COUNT+1))
              continue
            fi
            
            # If it's not a VPN issue, don't retry
            echo "Test failure doesn't seem to be VPN-related. Exiting with code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          done
          
          echo "Exhausted all retries. Tests failed."
          exit 1
          EOF
          
          # Make the script executable
          chmod +x run-tests-with-resilience.sh
          
          # Run it
          ./run-tests-with-resilience.sh
        env:
          APPLITOOLS_API_KEY: ${{ env.APPLITOOLS_API_KEY }}
          PLAYWRIGHT_JUNIT_OUTPUT: results.xml
          
      - name: Stop VPN Connection Monitor
        if: always()
        run: |
          if [ -n "$MONITOR_PID" ]; then
            echo "Stopping VPN connection monitor (PID: $MONITOR_PID)"
            kill $MONITOR_PID || true
          fi

      - name: Disconnect from NordLayer Server
        if: always()
        run: |
          echo "Disconnecting from NordLayer..."
          nordlayer disconnect || echo "Failed to disconnect, may already be disconnected"
          echo "Verifying disconnection..."
          nordlayer status || echo "Status check failed, assuming disconnected"

      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Upload Test Results to Datadog
        if: always()
        run: |
          if [ -f results.xml ]; then
            echo "Uploading results.xml to Datadog..."
            # datadog-ci junit upload results.xml --service "$DD_SERVICE"
          else
            echo "results.xml not found, skipping Datadog upload."
          fi

      - name: Post Slack Notification
        if: always() && inputs.deployment_id != 'manual'
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
          DEPLOYMENT_ID: ${{ inputs.deployment_id }}
        run: |
          if [ "${JOB_STATUS}" = "success" ]; then
            MESSAGE="✅ E2E Tests Passed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          else
            MESSAGE="❌ E2E Tests Failed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          fi
          echo "Posting Slack message: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MESSAGE}\"}" "$SLACK_WEBHOOK_URL"
