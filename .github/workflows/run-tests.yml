name: E2E Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Vercel Deployment ID'
        required: false
        default: 'manual'

jobs:
  visual-tests:
    name: "E2E Tests (Deployment: ${{ inputs.deployment_id }})"
    runs-on: ubuntu-latest
    env:
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ap1.datadoghq.com
      DD_SERVICE: dydx.trade
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DYDX_MNEMONIC: ${{ secrets.DYDX_MNEMONIC }}
      DYDX_ADDRESS: ${{ secrets.DYDX_ADDRESS }}
      DYDX_NETWORK_TYPE: mainnet
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Log Event Details
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Deployment ID: ${{ inputs.deployment_id }}"
          echo "Full event payload: ${{ toJSON(github.event) }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          sleep 2
          sudo chown -R runner:runner /run/nordlayer/
          sudo chmod 755 /run/nordlayer
          sudo chmod 666 /run/nordlayer/nordlayer.sock

      - name: Configure system for stable VPN connection
        run: |
          # Enable IP forwarding
          echo "Enabling IP forwarding..."
          sudo sysctl -w net.ipv4.ip_forward=1
          
          # Increase connection tracking table size
          echo "Optimizing connection tracking..."
          sudo sysctl -w net.netfilter.nf_conntrack_max=131072
          
          # Disable IPv6 (optional, can help with some VPN issues)
          echo "Disabling IPv6..."
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
          
          # Keep VPN connection alive by disabling TCP connection timeout
          echo "Optimizing TCP keepalive..."
          sudo sysctl -w net.ipv4.tcp_keepalive_time=60
          sudo sysctl -w net.ipv4.tcp_keepalive_intvl=15
          sudo sysctl -w net.ipv4.tcp_keepalive_probes=6
          
          # Prefer IPv4 over IPv6 for all connections
          echo "Setting IPv4 preference..."
          sudo sh -c 'echo "precedence ::ffff:0:0/96 100" >> /etc/gai.conf'
          
          # Verify system settings
          echo "Current system network settings:"
          sudo sysctl -a | grep -E 'net.ipv4.ip_forward|net.netfilter.nf_conntrack_max|net.ipv6.conf.all.disable_ipv6|net.ipv4.tcp_keepalive'

      - name: Authenticate with NordLayer
        run: |
          nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"

      - name: Connect to NordLayer Server
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT to connect to VPN..."
            nordlayer connect "dos-server-BQG2cKQV" && break
            
            echo "Connection attempt $ATTEMPT failed. Waiting before retry..."
            sleep 10
            ATTEMPT=$((ATTEMPT+1))
            
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "Failed to connect after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          done
          
          echo "Successfully connected to VPN"

      - name: Verify VPN Connection
        run: |
          # Make the script executable
          chmod +x .github/scripts/vpn-health-check.sh
          
          # Run initial health check
          ./.github/scripts/vpn-health-check.sh
          
          if [ $? -ne 0 ]; then
            echo "Initial VPN health check failed after connection attempts."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install dependencies for Xvfb
        run: sudo apt-get install -y xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -ac &>/dev/null &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      - name: Monitor VPN Connection During Tests
        run: |
          # Start background monitoring process
          (
            while true; do
              echo "$(date): Running periodic VPN health check..."
              ./.github/scripts/vpn-health-check.sh > /dev/null || echo "⚠️ VPN health check failed during test execution"
              sleep 120  # Check every 2 minutes
            done
          ) &
          MONITOR_PID=$!
          echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_ENV
          
      - name: Run Playwright tests with Applitools and network resilience
        run: |
          # Create a wrapper script for test execution with network checks
          cat > run-tests-with-resilience.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          LAST_CHECKPOINT=0
          
          # Function to check VPN before proceeding
          check_vpn_before_continuing() {
            echo "Verifying VPN connection before continuing..."
            if ! ./.github/scripts/vpn-health-check.sh; then
              echo "VPN check failed, attempting to fix..."
              ./.github/scripts/vpn-health-check.sh
              if [ $? -ne 0 ]; then
                echo "Could not restore VPN connection"
                return 1
              fi
            fi
            return 0
          }
          
          # Run the tests with VPN health checks and resilience
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check VPN before starting/continuing
            if ! check_vpn_before_continuing; then
              echo "VPN connection issue, incrementing retry count"
              RETRY_COUNT=$((RETRY_COUNT+1))
              continue
            fi
            
            # Run the tests
            if [ $LAST_CHECKPOINT -eq 0 ]; then
              echo "Starting tests from beginning"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test
              TEST_EXIT_CODE=$?
            else
              echo "Resuming tests from checkpoint $LAST_CHECKPOINT"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test --repeat-each=1 --shard="$LAST_CHECKPOINT/3"
              TEST_EXIT_CODE=$?
            fi
            
            # Check if tests succeeded
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "Tests completed successfully!"
              exit 0
            fi
            
            # Tests failed, check if it was due to a VPN/network issue
            if ! check_vpn_before_continuing; then
              echo "Test failure may be due to VPN issues. Retry $((RETRY_COUNT+1))/$MAX_RETRIES"
              LAST_CHECKPOINT=$((LAST_CHECKPOINT+1))
              RETRY_COUNT=$((RETRY_COUNT+1))
              continue
            fi
            
            # If it's not a VPN issue, don't retry
            echo "Test failure doesn't seem to be VPN-related. Exiting with code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          done
          
          echo "Exhausted all retries. Tests failed."
          exit 1
          EOF
          
          # Make the script executable
          chmod +x run-tests-with-resilience.sh
          
          # Run it
          ./run-tests-with-resilience.sh
        env:
          APPLITOOLS_API_KEY: ${{ env.APPLITOOLS_API_KEY }}
          PLAYWRIGHT_JUNIT_OUTPUT: results.xml
          
      - name: Stop VPN Connection Monitor
        if: always()
        run: |
          if [ -n "$MONITOR_PID" ]; then
            echo "Stopping VPN connection monitor (PID: $MONITOR_PID)"
            kill $MONITOR_PID || true
          fi

      - name: Disconnect from NordLayer Server
        if: always()
        run: |
          echo "Disconnecting from NordLayer..."
          nordlayer disconnect || echo "Failed to disconnect, may already be disconnected"
          echo "Verifying disconnection..."
          nordlayer status || echo "Status check failed, assuming disconnected"

      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Upload Test Results to Datadog
        if: always()
        run: |
          if [ -f results.xml ]; then
            echo "Uploading results.xml to Datadog..."
            # datadog-ci junit upload results.xml --service "$DD_SERVICE"
          else
            echo "results.xml not found, skipping Datadog upload."
          fi

      - name: Post Slack Notification
        if: always()
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
          DEPLOYMENT_ID: ${{ inputs.deployment_id }}
        run: |
          if [ "${JOB_STATUS}" = "success" ]; then
            MESSAGE="✅ E2E Tests Passed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          else
            MESSAGE="❌ E2E Tests Failed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          fi
          echo "Posting Slack message: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MESSAGE}\"}" "$SLACK_WEBHOOK_URL"
