name: E2E Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Deployment ID'
        required: false
        default: 'manual'
  pull_request:

permissions:
  contents: read

env:
  APPLITOOLS_API_KEY:    ${{ secrets.APPLITOOLS_API_KEY }}
  APPLITOOLS_SERVER_URL: https://eyesapi.applitools.com
  S3_TRACE_BUCKET:       ${{ secrets.S3_TRACE_BUCKET }}
  AWS_DEFAULT_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}
  SLACK_BOT_TOKEN:       ${{ secrets.SLACK_BOT_TOKEN }}

jobs:
  e2e-test:
    name: "E2E Tests (Deployment: ${{ inputs.deployment_id }})"
    runs-on: self-hosted

    env:
      APPLITOOLS_BATCH_ID: ${{ github.event.pull_request.head.sha || github.sha }}
      RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      SLACK_CHANNEL: "${{ inputs.deployment_id == 'manual' && 'C08GBVA4JKT' || 'C07VDF07WLU' }}"
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DYDX_MNEMONIC: ${{ secrets.DYDX_MNEMONIC }}
      DYDX_ADDRESS: ${{ secrets.DYDX_ADDRESS }}
      DYDX_NETWORK_TYPE: mainnet
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DYDX_MNEMONIC_CANCEL_ORDER: ${{ secrets.DYDX_MNEMONIC_CANCEL_ORDER }}
      DYDX_ADDRESS_CANCEL_ORDER: ${{ secrets.DYDX_ADDRESS_CANCEL_ORDER }}
      SEED_PHRASE_CANCEL_ORDER: ${{ secrets.SEED_PHRASE_CANCEL_ORDER }}
      SEED_PHRASE_MEGAVAULT: ${{ secrets.SEED_PHRASE_MEGAVAULT }}
      AWS_DEFAULT_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}
      S3_TRACE_BUCKET:       ${{ secrets.S3_TRACE_BUCKET }}

    outputs:
      slack_ts:       ${{ steps.slack_progress_message.outputs.message_ts }}
      needs_review:   ${{ steps.check-batch.outputs.needsReview }}
      found_batch_id: ${{ steps.check-batch.outputs.foundBatchID }}
      slack_channel:  ${{ env.SLACK_CHANNEL }}

    steps:
      # 1) Checkout this E2E repo (for your scripts & test code)
      - name: Checkout E2E repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      # 2) Also checkout v4-web so we can inspect its tags
      - name: Checkout v4-web repository
        if: ${{ inputs.deployment_id != 'manual' }}
        uses: actions/checkout@v4
        with:
          repository: 'dydxprotocol/v4-web'
          path: v4-web
          fetch-depth: 0

      # 3) Identify latest production tag on main in v4-web
      - name: Identify latest production tag on main
        if: ${{ inputs.deployment_id != 'manual' }}
        id: prod-tag
        working-directory: v4-web
        run: |
          echo "🔍 Finding latest 'release/vX.Y.Z' tag on main in v4-web..."
          git fetch origin main --tags
          PRODUCTION_TAG=$(git tag --merged origin/main \
            | grep -E '^release/v[0-9]+\.[0-9]+\.[0-9]+$' \
            | sort -V \
            | tail -n1)

          if [ -z "$PRODUCTION_TAG" ]; then
            echo "❌ No production tags found on main branch of v4-web!"
            exit 1
          fi

          echo "✔️  Latest production tag is $PRODUCTION_TAG"
          echo "production-tag=$PRODUCTION_TAG" >> $GITHUB_OUTPUT

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Find Release Thread (if applicable)
        if: ${{ inputs.deployment_id != 'manual' }}
        id: find-thread
        run: |
          # instead of the raw deployment ID, use the production tag
          KEY="${{ steps.prod-tag.outputs.production-tag }}"
          echo "🔎 Searching Slack for release key: $KEY"
          HISTORY=$(curl -sf \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -G --data-urlencode "channel=$SLACK_CHANNEL" \
               --data-urlencode "limit=100" \
            https://slack.com/api/conversations.history)

          THREAD_TS=$(echo "$HISTORY" \
            | jq -r --arg key "$KEY" '
                .messages[]
                | select(
                    .attachments? and
                    ([ .attachments[] | (.fallback // ""), (.title // ""), (.pretext // ""), (.text // "") ]
                      | map(test($key; "i")) | any
                    )
                  )
                | .ts
              ' \
            | head -1)

          if [ -n "$THREAD_TS" ]; then
            echo "💬 Found existing thread: $THREAD_TS"
            echo "thread_ts=$THREAD_TS" >> $GITHUB_OUTPUT
          else
            echo "💬 No thread found for $KEY; will post as new thread."
          fi

      - name: 🏁 Post Initial Progress to Slack
        id: slack_progress_message
        env:
          PARENT_THREAD_TS: ${{ steps.find-thread.outputs.thread_ts }}
        run: |
          if [ "${{ inputs.deployment_id }}" = "manual" ]; then
            DISPLAY="manual"
          else
            DISPLAY="${{ steps.prod-tag.outputs.production-tag }}"
          fi

          TEXT=$(printf "*E2E Pipeline for:* %s\n>[░░░░░░] 0%% | Initializing job...\n<%s|View full logs>" \
            "$DISPLAY" "$RUN_URL")

          PAYLOAD=$(jq -n --arg channel "$SLACK_CHANNEL" --arg text "$TEXT" '{channel: $channel, text: $text}')
          if [ -n "$PARENT_THREAD_TS" ]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq --arg thread_ts "$PARENT_THREAD_TS" '. + {thread_ts: $thread_ts}')
          fi

          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data "$PAYLOAD" \
            https://slack.com/api/chat.postMessage)

          TS=$(echo "$RESPONSE" | jq -r .ts)
          echo "message_ts=$TS" >> $GITHUB_OUTPUT
          echo "MESSAGE_TS=$TS" >> $GITHUB_ENV

      - name: Install dependencies
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   "${{ env.SLACK_CHANNEL }}"
          MESSAGE_TS:      ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT:    "…"
          PLAYWRIGHT_BROWSERS_PATH: /opt/playwright
        run: |
          scripts/update-slack-progress.sh
          npm install

      - name: ► Run Cancel-Order Tests
        continue-on-error: true
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:      ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline (Tag: ${{ steps.prod-tag.outputs.production-tag }})*\n>[█░░░░░] 10% | Running Cancel-Order tests...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --project=cancel-order-tests

      - name: ► Run Megavault Tests
        continue-on-error: true
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:   ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline for Deployment:* ${{ inputs.deployment_id }}\n>[█░░░░] 20% | Running Megavault tests...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --project=megavault-tests

      - name: ► Run Deposit/Withdraw Tests
        continue-on-error: true
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:   ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline for Deployment:* ${{ inputs.deployment_id }}\n>[██░░░░] 30% | Running Deposit/Withdraw tests...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --project=deposit-withdraw-tests

      - name: ► Run Main Tests
        id: run-tests
        continue-on-error: true
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:   ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline for Deployment:* ${{ inputs.deployment_id }}\n>[████░░] 75% | Running remaining main tests...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --project=main-tests --workers=2

      - name: Sync full HTML report to S3
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:   ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline for Deployment:* ${{ inputs.deployment_id }}\n>[██████] 90% | Uploading HTML report to S3...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          aws s3 sync playwright-report/ s3://${{ env.S3_TRACE_BUCKET }}/runs/${{ github.run_id }}/report/ --delete
          echo "REPORT_URL=https://${{ env.S3_TRACE_BUCKET }}.s3.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/runs/${{ github.run_id }}/report/index.html" >> $GITHUB_ENV

      - name: Check Applitools Batch
        id: check-batch
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:   ${{ env.MESSAGE_TS }}
          MESSAGE_TEXT: "*E2E Pipeline for Deployment:* ${{ inputs.deployment_id }}\n>[██████] 95% | Checking Applitools for visual diffs...\n<${{ env.RUN_URL }}|View full logs>"
        run: |
          scripts/update-slack-progress.sh
          ./scripts/checkApplitoolsBatchByPointer.sh "$APPLITOOLS_SERVER_URL" "$APPLITOOLS_API_KEY" "$APPLITOOLS_BATCH_ID"

      - name: ✅ Post Final Result to Slack
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL:   ${{ env.SLACK_CHANNEL }}
          MESSAGE_TS:      ${{ env.MESSAGE_TS }}
          RUN_URL:         https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          APPLITOOLS_URL:  https://eyes.applitools.com/app/test-results/${{ steps.check-batch.outputs.foundBatchID }}/
          REPORT_URL:      ${{ env.REPORT_URL }}
        run: |
          set -e
          OUTCOME="${{ steps.run-tests.outcome }}"
          if [ "$OUTCOME" != "success" ]; then
            HEADER="❌ E2E Tests Failed"
            BODY="• Deployment ID: ${{ inputs.deployment_id }}\n• <${RUN_URL}|View GitHub Run>\n• <${REPORT_URL}|View Full HTML Report>"
          elif [ "${{ steps.check-batch.outputs.needsReview }}" = "true" ]; then
            HEADER="⚠️ E2E Tests Passed with Visual Diffs"
            BODY="• Deployment ID: ${{ inputs.deployment_id }}\n• *Status:* Needs manual review\n• <${APPLITOOLS_URL}|Review Diffs in Applitools>\n• <${RUN_URL}|View GitHub Run\n• <${REPORT_URL}|View Full HTML Report>"
          else
            HEADER="✅ E2E Tests Passed"
            BODY="• Deployment ID: ${{ inputs.deployment_id }}\n• *Status:* All visual tests passed\n• <${APPLITOOLS_URL}|View in Applitools>\n• <${RUN_URL}|View GitHub Run>\n• <${REPORT_URL}|View Full HTML Report>"
          fi

          read -r -d '' MESSAGE_TEXT <<-EOF
          	${HEADER}
          	• Deployment ID: ${{ inputs.deployment_id }}
          	• <${RUN_URL}|View GitHub Run>
          	• <${REPORT_URL}|View Full HTML Report>
          EOF

          echo ">> DEBUG: MESSAGE_TEXT is: <$MESSAGE_TEXT>"

          export MESSAGE_TEXT
          scripts/update-slack-progress.sh || true

      - name: Upload Test Report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 7

  applitools-auto-complete:
    name: "Applitools Auto-Completion"
    if: needs.e2e-test.outputs.needs_review == 'false'
    needs: e2e-test
    runs-on: ubuntu-latest
    env:
      SLACK_CHANNEL:      ${{ needs.e2e-test.outputs.slack_channel }}
      ROOT_THREAD_TS:     ${{ needs.e2e-test.outputs.slack_ts }}
      SLACK_BOT_TOKEN:    ${{ secrets.SLACK_BOT_TOKEN }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
    steps:
      - name: Mark Applitools Batch as Complete
        run: |
          curl -X POST -d '' -H 'accept:*/*' "$APPLITOOLS_SERVER_URL/api/externals/github/servers/github.com/commit/${{ needs.e2e-test.outputs.found_batch_id }}/complete?apiKey=$APPLITOOLS_API_KEY"
      - name: Post Slack Thread (All Passed)
        run: |
          APPLITOOLS_LINK="https://eyes.applitools.com/app/test-results/${{ needs.e2e-test.outputs.found_batch_id }}/"
          GITHUB_RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="Additional details posted:\n• <${APPLITOOLS_LINK}|View Applitools Batch>\n• <${GITHUB_RUN_URL}|View GitHub Action>"
          JSON_PAYLOAD=$(jq -n --arg channel "$SLACK_CHANNEL" --arg ts "$ROOT_THREAD_TS" --arg text "$MSG" '{channel: $channel, thread_ts: $ts, text: $text}')
          curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $SLACK_BOT_TOKEN" --data "$JSON_PAYLOAD" https://slack.com/api/chat.postMessage

  batch-status-polling:
    name: "Applitools Batch Status Polling"
    if: needs.e2e-test.outputs.needs_review == 'true'
    needs: e2e-test
    runs-on: ubuntu-latest
    env:
      SLACK_CHANNEL:      ${{ needs.e2e-test.outputs.slack_channel }}
      ROOT_THREAD_TS:     ${{ needs.e2e-test.outputs.slack_ts }}
      SLACK_BOT_TOKEN:    ${{ secrets.SLACK_BOT_TOKEN }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Poll Applitools Batch Status
        id: poll-status
        run: |
          send_slack_message() {
            local msg="$1"
            JSON_PAYLOAD=$(jq -n --arg channel "$SLACK_CHANNEL" --arg ts "$ROOT_THREAD_TS" --arg text "$msg" '{channel: $channel, thread_ts: $ts, text: $text}')
            curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $SLACK_BOT_TOKEN" --data "$JSON_PAYLOAD" https://slack.com/api/chat.postMessage
          }

          APPLITOOLS_LINK="https://eyes.applitools.com/app/test-results/${{ needs.e2e-test.outputs.found_batch_id }}/"
          GITHUB_RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          
          MAX=120; INTERVAL=30; i=0; STATUS=""
          while (( i < MAX )); do
            ((i++))
            START=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ); END=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            resp=$(curl -s -H "X-Eyes-Api-Key: $APPLITOOLS_API_KEY" "${APPLITOOLS_SERVER_URL}/api/v1/batches?start=${START}&end=${END}&pageSize=100")
            B=$(echo "$resp" | jq --arg bid "${{ needs.e2e-test.outputs.found_batch_id }}" '.batches[] | select(.id==$bid)')
            
            if [[ -z "$B" || "$B" == "null" ]]; then
              echo "Batch ${{ needs.e2e-test.outputs.found_batch_id }} not found in API response yet. Retrying in ${INTERVAL}s..."
              sleep "$INTERVAL"; continue
            fi
            
            F=$(echo "$B" | jq -r '.runningSummary.failedTests // 0'); U=$(echo "$B" | jq -r '.runningSummary.unresolvedTests // 0'); N=$(echo "$B" | jq -r '.runningSummary.newTests // 0')
            if (( F > 0 )); then STATUS="FAILED"; break; elif (( F==0 && U==0 && N==0 )); then STATUS="PASSED"; break; else sleep "$INTERVAL"; fi
          done
          
          if [[ "$STATUS" == "PASSED" ]]; then
            send_slack_message "✅ *Visual Review Approved*\n🎉 Rollout can proceed.\n<${GITHUB_RUN_URL}|View Action> | <${APPLITOOLS_LINK}|View Applitools>" || true
            echo "status=approved" >> $GITHUB_OUTPUT
          elif [[ "$STATUS" == "FAILED" ]]; then
            send_slack_message "❌ *Visual Review Rejected*\n🚨 Rollout stopped.\n<${GITHUB_RUN_URL}|View Action> | <${APPLITOOLS_LINK}|View Applitools>" || true
            echo "status=rejected" >> $GITHUB_OUTPUT
          else
            send_slack_message "⚠️ *Review Timed Out*\n⏳ Still unresolved after 1 hour. Please check manually.\n<${GITHUB_RUN_URL}|View Action> | <${APPLITOOLS_LINK}|View Applitools>" || true
            echo "status=timeout" >> $GITHUB_OUTPUT
          fi
      - name: Mark Applitools Batch as Complete
        if: steps.poll-status.outputs.status == 'approved'
        run: |
          curl -X POST -d '' -H 'accept:*/*' "$APPLITOOLS_SERVER_URL/api/externals/github/servers/github.com/commit/${{ needs.e2e-test.outputs.found_batch_id }}/complete?apiKey=$APPLITOOLS_API_KEY"
      - name: Fail Workflow if Review Rejected
        if: steps.poll-status.outputs.status == 'rejected'
        run: exit 1