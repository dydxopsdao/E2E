name: E2E Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Deployment ID'
        required: false
        default: 'manual'
  pull_request:

env:
  APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
  APPLITOOLS_SERVER_URL: https://eyesapi.applitools.com

jobs:
  e2e-test:
    name: "E2E Tests (Deployment: ${{ inputs.deployment_id }})"
    runs-on: self-hosted

    env:
      APPLITOOLS_BATCH_ID: ${{ github.event.pull_request.head.sha || github.sha }}
      SLACK_CHANNEL: ${{ inputs.deployment_id == 'manual' && '#test-channel' || 'C07VDF07WLU' }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DYDX_MNEMONIC: ${{ secrets.DYDX_MNEMONIC }}
      DYDX_ADDRESS: ${{ secrets.DYDX_ADDRESS }}
      DYDX_NETWORK_TYPE: mainnet
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DYDX_MNEMONIC_CANCEL_ORDER: ${{ secrets.DYDX_MNEMONIC_CANCEL_ORDER }}
      DYDX_ADDRESS_CANCEL_ORDER: ${{ secrets.DYDX_ADDRESS_CANCEL_ORDER }}
      SEED_PHRASE_CANCEL_ORDER: ${{ secrets.SEED_PHRASE_CANCEL_ORDER }}
      SEED_PHRASE_MEGAVAULT: ${{ secrets.SEED_PHRASE_MEGAVAULT }}

    outputs:
      root_thread_ts: ${{ steps.find-thread-diagnostic.outputs.thread_ts }}
      slack_ts:       ${{ steps.slack-started.outputs.ts }}
      needs_review:   ${{ steps.check-batch.outputs.needsReview }}
      found_batch_id: ${{ steps.check-batch.outputs.foundBatchID }}
      slack_channel:  ${{ env.SLACK_CHANNEL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          token: ${{ secrets.GH_PAT_FOR_CHECKOUT }}

      - name: Install dependencies
        run: npm install
        env:
          PLAYWRIGHT_BROWSERS_PATH: /opt/playwright

      - name: Find Release Thread (DIAGNOSTIC)
        id: find-thread-diagnostic
        if: ${{ inputs.deployment_id != 'manual' }}
        run: |
          echo "::group::Slack history diagnostic for ID=${{ inputs.deployment_id }}"
          HISTORY=$(curl --fail -s \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -G --data-urlencode "channel=$SLACK_CHANNEL" \
               --data-urlencode "limit=100" \
            https://slack.com/api/conversations.history)
          echo "::endgroup::"

          THREAD_TS=$(echo "$HISTORY" | jq -r --arg id "${{ inputs.deployment_id }}" '
            .messages[]
            | select(
                .attachments? and (
                  [ .attachments[]
                      | ( .fallback // "" ),
                        ( .title    // "" ),
                        ( .pretext  // "" ),
                        ( .text     // "" )
                  ]
                  | map(test($id; "i"))
                  | any
                )
              )
            | .ts
          ' | head -1)
 
          if [ -n "$THREAD_TS" ]; then
            echo "thread_ts=$THREAD_TS" >> $GITHUB_OUTPUT
            # export for all subsequent steps in this job
            echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV
          else
            echo "::warning::no matching release message in last 100"
          fi

      - name: Post ‚ÄúTests started‚Äù to Slack
        id: slack-started
        if: ${{ inputs.deployment_id != 'manual' && env.THREAD_TS }}
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TEXT="üèÅ E2E tests started for **Deployment ID:** ${{ inputs.deployment_id }}\nüîó [View run logs]($RUN_URL)"
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data "{\"channel\":\"$SLACK_CHANNEL\",\"thread_ts\":\"$THREAD_TS\",\"text\":\"$TEXT\"}" \
            https://slack.com/api/chat.postMessage)
          echo "ts=$(echo \"$RESPONSE\" | jq -r .ts)" >> $GITHUB_OUTPUT

      - name: Run E2E Tests (Playwright + Applitools)
        id: run-tests
        continue-on-error: true
        env:
          DEPLOYMENT_ID: ${{ inputs.deployment_id }}
        run: |
          PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum \
            --server-args='-screen 0 1920x1080x24' \
            npx playwright test --workers=2

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Check Applitools Batch By Pointer
        id: check-batch
        if: always()
        run: |
          chmod +x scripts/checkApplitoolsBatchByPointer.sh
          ./scripts/checkApplitoolsBatchByPointer.sh \
            "$APPLITOOLS_SERVER_URL" \
            "$APPLITOOLS_API_KEY" \
            "$APPLITOOLS_BATCH_ID"

      - name: Post Slack Notification (Main Message)
        id: slack-notify
        if: always()
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          OUTCOME="${{ steps.run-tests.outcome }}"       # success|failure|cancelled
          APPLITOOLS_ID="${{ steps.check-batch.outputs.foundBatchID }}"
          APPLITOOLS_LINK="https://eyes.applitools.com/app/test-results/${APPLITOOLS_ID}/"

          if [ "$OUTCOME" != "success" ]; then
            TEXT="‚ùå E2E tests ${OUTCOME}! (**Deployment ID:** ${{ inputs.deployment_id }})\nüîó [View logs]($RUN_URL)"
          else
            if [ "${{ steps.check-batch.outputs.needsReview }}" = "true" ]; then
              TEXT="‚úÖ E2E tests passed! üîç *Visual diffs detected ‚Äì manual review needed.*\nüîó [Review in Applitools]($APPLITOOLS_LINK)\nüîó [Run details]($RUN_URL)"
            else
              TEXT="‚úÖ E2E tests passed! (**Deployment ID:** ${{ inputs.deployment_id }})\nüéâ Rollout can proceed.\nüîó [Run details]($RUN_URL)"
            fi
          fi

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data "{\"channel\":\"$SLACK_CHANNEL\",\"thread_ts\":\"$THREAD_TS\",\"text\":\"$TEXT\"}" \
            https://slack.com/api/chat.postMessage

  applitools-auto-complete:
    name: "Applitools Auto-Completion"
    if: needs.e2e-test.outputs.needs_review == 'false'
    needs: e2e-test
    runs-on: ubuntu-latest

    env:
      SLACK_CHANNEL:    ${{ needs.e2e-test.outputs.slack_channel }}
      ROOT_THREAD_TS:   ${{ needs.e2e-test.outputs.root_thread_ts }}
      SLACK_BOT_TOKEN:  ${{ secrets.SLACK_BOT_TOKEN }}
      APPLITOOLS_API_KEY:${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - name: Mark Applitools Batch as Complete
        run: |
          curl -X POST -d '' -H 'accept:*/*' \
            "$APPLITOOLS_SERVER_URL/api/externals/github/servers/github.com/commit/${{ needs.e2e-test.outputs.found_batch_id }}/complete?apiKey=$APPLITOOLS_API_KEY"

      - name: Post Slack Thread (All Passed)
        run: |
          THREAD_TS="$ROOT_THREAD_TS"
          APPLITOOLS_LINK="https://eyes.applitools.com/app/test-results/${{ needs.e2e-test.outputs.found_batch_id }}/"
          GITHUB_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="Additional details:\n- GitHub Action: ${GITHUB_RUN_URL}\n- Applitools: ${APPLITOOLS_LINK}"
          curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data "{\"channel\":\"$SLACK_CHANNEL\",\"thread_ts\":\"$THREAD_TS\",\"text\":\"$MSG\"}" \
            https://slack.com/api/chat.postMessage

  batch-status-polling:
    name: "Applitools Batch Status Polling"
    if: needs.e2e-test.outputs.needs_review == 'true'
    needs: e2e-test
    runs-on: ubuntu-latest

    env:
      SLACK_CHANNEL:    ${{ needs.e2e-test.outputs.slack_channel }}
      ROOT_THREAD_TS:   ${{ needs.e2e-test.outputs.root_thread_ts }}
      SLACK_BOT_TOKEN:  ${{ secrets.SLACK_BOT_TOKEN }}
      APPLITOOLS_API_KEY:${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Poll Applitools Batch Status
        id: poll-status
        run: |
          send_slack_message() {
            local msg="$1"; local ts="$ROOT_THREAD_TS"
            esc=$(echo "$msg" | sed 's/"/\\"/g' | sed "s/'/\\'/g")
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              --data "{\"channel\":\"$SLACK_CHANNEL\",\"thread_ts\":\"$ts\",\"text\":\"$esc\"}" \
              https://slack.com/api/chat.postMessage
          }

          APPLITOOLS_LINK="https://eyes.applitools.com/app/test-results/${{ needs.e2e-test.outputs.found_batch_id }}/"
          GITHUB_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          send_slack_message "‚ö†Ô∏è **Visual differences detected**\n\nüîç *Waiting for manual review...*\n[Review in Applitools](${APPLITOOLS_LINK})\n‚è≥ Monitoring up to 1h."

          MAX=120; I=0; INTERVAL=30; STATUS=""
          while [ "$I" -lt "$MAX" ]; do
            I=$((I+1))
            START=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)
            END=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            RESP=$(curl -s -X GET \
              -H "X-Eyes-Api-Key: $APPLITOOLS_API_KEY" \
              "$APPLITOOLS_SERVER_URL/api/v1/batches?start=$START&end=$END&pageSize=100")
            B=$(echo "$RESP" | jq --arg bid "${{ needs.e2e-test.outputs.found_batch_id }}" \
                  '.batches[]|select(.id==$bid)')
            if [ -z "$B" ] || [ "$B" = "null" ]; then sleep "$INTERVAL"; continue; fi

            F=$(echo "$B" | jq -r '.runningSummary.failedTests // .statusSummary.Failed // 0')
            U=$(echo "$B" | jq -r '.runningSummary.unresolvedTests // .statusSummary.Unresolved // 0')
            N=$(echo "$B" | jq -r '.runningSummary.newTests // .statusSummary.New // 0')

            if   [ "$F" -gt 0 ]; then STATUS="FAILED"; break
            elif [ "$F" -eq 0 ] && [ "$U" -eq 0 ] && [ "$N" -eq 0 ]; then STATUS="PASSED"; break
            fi
            sleep "$INTERVAL"
          done

          if [ "$STATUS" = "PASSED" ]; then
            send_slack_message "‚úÖ **Visual Review Approved**\n\nüéâ Rollout can proceed.\n\nüîó [Action](${GITHUB_RUN_URL}) | [Applitools](${APPLITOOLS_LINK})"
            echo "status=approved" >> $GITHUB_OUTPUT
          elif [ "$STATUS" = "FAILED" ]; then
            send_slack_message "‚ùå **Visual Review Rejected**\n\nüö® Rollout stopped.\n\nüîó [Action](${GITHUB_RUN_URL}) | [Applitools](${APPLITOOLS_LINK})"
            echo "status=rejected" >> $GITHUB_OUTPUT
          else
            send_slack_message "‚ö†Ô∏è **Review timed out/has issues**\n\n‚è≥ Please check manually.\n\nüîó [Action](${GITHUB_RUN_URL}) | [Applitools](${APPLITOOLS_LINK})"
            echo "status=timeout" >> $GITHUB_OUTPUT
          fi

      - name: Mark Applitools Batch as Complete
        if: steps.poll-status.outputs.status == 'approved'
        run: |
          curl -X POST -d '' -H 'accept:*/*' \
            "$APPLITOOLS_SERVER_URL/api/externals/github/servers/github.com/commit/${{ needs.e2e-test.outputs.found_batch_id }}/complete?apiKey=$APPLITOOLS_API_KEY"

      - name: Fail Workflow if Review Rejected
        if: steps.poll-status.outputs.status == 'rejected'
        run: exit 1
