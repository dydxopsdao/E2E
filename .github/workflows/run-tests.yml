name: Visual Tests Pipeline

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deployment]

jobs:
  visual-tests:
    name: Run Visual Tests with NordLayer VPN
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    env:
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ap1.datadoghq.com
      DD_SERVICE: dydx.trade
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Log Event Details
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event type: ${{ github.event.event_type }}"
          echo "Client payload type: ${{ github.event.client_payload.type }}"
          echo "Full event payload: ${{ toJSON(github.event) }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          sleep 2
          sudo chown -R runner:runner /run/nordlayer/
          sudo chmod 755 /run/nordlayer
          sudo chmod 666 /run/nordlayer/nordlayer.sock

      - name: Authenticate with NordLayer
        run: |
          nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"

      - name: Connect to NordLayer Server
        run: nordlayer connect "dos-server-BQG2cKQV"

      - name: Verify VPN Connection
        run: |
          echo "Verifying VPN IP..."
          sleep 20
          curl ifconfig.me

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install dependencies for Xvfb
        run: sudo apt-get install -y xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -ac &>/dev/null &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      - name: Run Playwright tests with Applitools
        run: |
          PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test
        env:
          APPLITOOLS_API_KEY: ${{ env.APPLITOOLS_API_KEY }}
          PLAYWRIGHT_JUNIT_OUTPUT: results.xml

      - name: Disconnect from NordLayer Server
        if: always()
        run: nordlayer disconnect || echo "Already disconnected"

      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Upload Test Results to Datadog
        if: always()
        run: |
          if [ -f results.xml ]; then
            echo "Uploading results.xml to Datadog..."
            # datadog-ci junit upload results.xml --service "$DD_SERVICE"
          else
            echo "results.xml not found, skipping Datadog upload."
          fi

      - name: Post Slack Notification
        if: always()
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
        run: |
          if [ "${JOB_STATUS}" = "success" ]; then
            MESSAGE="✅ Playwright Visual Tests Passed!\nDetails: $RUN_URL"
          else
            MESSAGE="❌ Playwright Visual Tests Failed!\nDetails: $RUN_URL"
          fi
          echo "Posting Slack message: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MESSAGE}\"}" "$SLACK_WEBHOOK_URL"
