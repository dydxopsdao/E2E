name: E2E Pipeline

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Vercel Deployment ID'
        required: false
        default: 'manual'

jobs:
  visual-tests:
    name: "E2E Tests (Deployment: ${{ inputs.deployment_id }})"
    runs-on: ubuntu-latest
    env:
      NORDLAYER_EMAIL: ${{ secrets.NORDLAYER_EMAIL }}
      NORDLAYER_PASSWORD: ${{ secrets.NORDLAYER_PASSWORD }}
      SEED_PHRASE: ${{ secrets.SEED_PHRASE }}
      METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ap1.datadoghq.com
      DD_SERVICE: dydx.trade
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DYDX_MNEMONIC: ${{ secrets.DYDX_MNEMONIC }}
      DYDX_ADDRESS: ${{ secrets.DYDX_ADDRESS }}
      DYDX_NETWORK_TYPE: mainnet
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Log Event Details
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Deployment ID: ${{ inputs.deployment_id }}"
          echo "Full event payload: ${{ toJSON(github.event) }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          
          # Wait longer for service to fully initialize
          echo "Waiting for NordLayer service to initialize..."
          sleep 5
          
          # Fix socket permissions more thoroughly
          echo "Setting correct permissions for NordLayer socket..."
          sudo mkdir -p /run/nordlayer/
          sudo chmod -R 777 /run/nordlayer/  # More permissive to ensure access
          sudo chown -R $USER:$USER /run/nordlayer/
          
          # Verify permissions
          ls -la /run/nordlayer/
          
          # Check if socket exists and has right permissions
          if [ -S /run/nordlayer/nordlayer.sock ]; then
            echo "Socket exists, setting permissions..."
            sudo chmod 666 /run/nordlayer/nordlayer.sock
          else
            echo "Socket file does not exist yet, may need to restart service..."
            sudo systemctl restart nordlayer.service
            sleep 5
            
            if [ -S /run/nordlayer/nordlayer.sock ]; then
              echo "Socket created after restart, setting permissions..."
              sudo chmod 666 /run/nordlayer/nordlayer.sock
            else
              echo "WARNING: Socket still not created. Will attempt recovery later."
            fi
          fi
          
          # Verify service is running
          echo "Checking NordLayer service status..."
          sudo systemctl status nordlayer.service

      - name: NordLayer Socket Recovery Check
        run: |
          # Function to check and fix socket permissions
          fix_socket_permissions() {
            echo "Checking for socket permission issues..."
            
            # Check if socket exists
            if [ ! -S /run/nordlayer/nordlayer.sock ]; then
              echo "Socket file does not exist. Restarting service..."
              sudo systemctl restart nordlayer.service
              sleep 5
            fi
            
            # Set permissions again
            sudo chmod -R 777 /run/nordlayer/
            
            if [ -S /run/nordlayer/nordlayer.sock ]; then
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              echo "Socket permissions set to 666"
            else
              echo "Socket file still missing after service restart"
              return 1
            fi
            
            # Verify with a command
            if nordlayer status; then
              echo "NordLayer status command successful, permissions fixed"
              return 0
            else
              echo "NordLayer command still failing after permission fix"
              return 1
            fi
          }
          
          # Check if we can run a NordLayer command
          if ! nordlayer status; then
            echo "NordLayer status failed. Attempting recovery..."
            
            # Try to fix socket permissions
            if fix_socket_permissions; then
              echo "Socket permissions fixed successfully"
            else
              echo "Socket permission fix failed, attempting full service recovery..."
              
              # More aggressive recovery: reinstall and reconfigure
              sudo apt-get remove -y nordlayer
              sudo apt-get install -y nordlayer
              sudo systemctl daemon-reload
              sudo systemctl restart nordlayer.service
              sleep 5
              
              # Set permissions again
              sudo chmod -R 777 /run/nordlayer/
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              
              # Verify recovery
              if nordlayer status; then
                echo "NordLayer service recovered successfully after reinstall"
              else
                echo "WARNING: NordLayer service still not working after reinstall"
                echo "Continuing anyway, will try to reconnect later"
              fi
            fi
          else
            echo "NordLayer status check passed, proceeding normally"
          fi

      - name: Authenticate with NordLayer
        run: |
          # Check socket permissions first
          if [ ! -r /run/nordlayer/nordlayer.sock ]; then
            echo "Socket file not readable, fixing permissions..."
            sudo chmod 666 /run/nordlayer/nordlayer.sock
          fi
          
          # Try login with retries
          MAX_ATTEMPTS=3
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT to login to NordLayer..."
            
            if nordlayer login --email "${{ env.NORDLAYER_EMAIL }}" --password "${{ env.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
              echo "Login successful"
              break
            fi
            
            echo "Login attempt $ATTEMPT failed. Trying to fix socket and retry..."
            sudo systemctl restart nordlayer.service
            sleep 5
            sudo chmod 666 /run/nordlayer/nordlayer.sock
            
            ATTEMPT=$((ATTEMPT+1))
            
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "Failed to login after $MAX_ATTEMPTS attempts"
              echo "DEBUG: Socket details:"
              ls -la /run/nordlayer/
              sudo systemctl status nordlayer.service
              exit 1
            fi
          done

      - name: Connect to NordLayer Server
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT to connect to VPN..."
            nordlayer connect "dos-server-BQG2cKQV" && break
            
            echo "Connection attempt $ATTEMPT failed. Waiting before retry..."
            sleep 10
            ATTEMPT=$((ATTEMPT+1))
            
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "Failed to connect after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          done
          
          echo "Successfully connected to VPN"

      - name: Verify VPN Connection
        run: |
          # Make the script executable
          chmod +x .github/scripts/vpn-health-check.sh
          
          # Run initial health check
          ./.github/scripts/vpn-health-check.sh
          
          if [ $? -ne 0 ]; then
            echo "Initial VPN health check failed after connection attempts."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install dependencies for Xvfb
        run: sudo apt-get install -y xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -ac &>/dev/null &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 3

      - name: Monitor VPN Connection During Tests
        run: |
          # Start background monitoring process
          (
            while true; do
              echo "$(date): Running periodic VPN health check..."
              ./.github/scripts/vpn-health-check.sh > /dev/null || echo "⚠️ VPN health check failed during test execution"
              sleep 120  # Check every 2 minutes
            done
          ) &
          MONITOR_PID=$!
          echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_ENV
          
      - name: Run Playwright tests with Applitools and network resilience
        run: |
          # Create a wrapper script for test execution with network checks
          cat > run-tests-with-resilience.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          LAST_CHECKPOINT=0
          
          # Function to repair NordLayer socket issues
          repair_nordlayer() {
            echo "Attempting to repair NordLayer..."
            # Check socket permissions
            if [ ! -S /run/nordlayer/nordlayer.sock ] || [ ! -r /run/nordlayer/nordlayer.sock ]; then
              echo "Socket file missing or not readable, fixing permissions..."
              sudo chmod -R 777 /run/nordlayer/
              sudo systemctl restart nordlayer.service
              sleep 5
              
              # Set socket permissions if it exists now
              if [ -S /run/nordlayer/nordlayer.sock ]; then
                sudo chmod 666 /run/nordlayer/nordlayer.sock
              fi
            fi
            
            # Try a basic command to see if service works now
            if nordlayer status &>/dev/null; then
              echo "NordLayer service repaired successfully"
              return 0
            else
              echo "NordLayer service still not working after repair"
              return 1
            fi
          }
          
          # Function to check VPN before proceeding
          check_vpn_before_continuing() {
            echo "Verifying VPN connection before continuing..."
            
            # First check if we have socket permission issues
            if ! nordlayer status &>/dev/null && [[ $(nordlayer status 2>&1) == *"permission denied"* ]]; then
              echo "Socket permission issue detected, attempting repair..."
              repair_nordlayer
            fi
            
            # Now run the full health check
            if ! ./.github/scripts/vpn-health-check.sh; then
              echo "VPN check failed, attempting to fix..."
              ./.github/scripts/vpn-health-check.sh
              if [ $? -ne 0 ]; then
                echo "Could not restore VPN connection"
                return 1
              fi
            fi
            return 0
          }
          
          # Run the tests with VPN health checks and resilience
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check VPN before starting/continuing
            if ! check_vpn_before_continuing; then
              echo "VPN connection issue, incrementing retry count"
              RETRY_COUNT=$((RETRY_COUNT+1))
              continue
            fi
            
            # Run the tests
            if [ $LAST_CHECKPOINT -eq 0 ]; then
              echo "Starting tests from beginning"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test
              TEST_EXIT_CODE=$?
            else
              echo "Resuming tests from checkpoint $LAST_CHECKPOINT"
              PLAYWRIGHT_JUNIT_OUTPUT=results.xml xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' \
                npx playwright test --repeat-each=1 --shard="$LAST_CHECKPOINT/3"
              TEST_EXIT_CODE=$?
            fi
            
            # Check if tests succeeded
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "Tests completed successfully!"
              exit 0
            fi
            
            # Tests failed, check if it was due to a VPN/network issue
            if ! check_vpn_before_continuing; then
              echo "Test failure may be due to VPN issues. Retry $((RETRY_COUNT+1))/$MAX_RETRIES"
              LAST_CHECKPOINT=$((LAST_CHECKPOINT+1))
              RETRY_COUNT=$((RETRY_COUNT+1))
              continue
            fi
            
            # If it's not a VPN issue, don't retry
            echo "Test failure doesn't seem to be VPN-related. Exiting with code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          done
          
          echo "Exhausted all retries. Tests failed."
          exit 1
          EOF
          
          # Make the script executable
          chmod +x run-tests-with-resilience.sh
          
          # Run it
          ./run-tests-with-resilience.sh
        env:
          APPLITOOLS_API_KEY: ${{ env.APPLITOOLS_API_KEY }}
          PLAYWRIGHT_JUNIT_OUTPUT: results.xml
          
      - name: Stop VPN Connection Monitor
        if: always()
        run: |
          if [ -n "$MONITOR_PID" ]; then
            echo "Stopping VPN connection monitor (PID: $MONITOR_PID)"
            kill $MONITOR_PID || true
          fi

      - name: Disconnect from NordLayer Server
        if: always()
        run: |
          echo "Disconnecting from NordLayer..."
          nordlayer disconnect || echo "Failed to disconnect, may already be disconnected"
          echo "Verifying disconnection..."
          nordlayer status || echo "Status check failed, assuming disconnected"

      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: playwright-test-report-${{ github.run_id }}
          path: playwright-report/

      - name: Upload Test Results to Datadog
        if: always()
        run: |
          if [ -f results.xml ]; then
            echo "Uploading results.xml to Datadog..."
            # datadog-ci junit upload results.xml --service "$DD_SERVICE"
          else
            echo "results.xml not found, skipping Datadog upload."
          fi

      - name: Post Slack Notification
        if: always()
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
          DEPLOYMENT_ID: ${{ inputs.deployment_id }}
        run: |
          if [ "${JOB_STATUS}" = "success" ]; then
            MESSAGE="✅ E2E Tests Passed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          else
            MESSAGE="❌ E2E Tests Failed! (Deployment: ${DEPLOYMENT_ID})\nDetails: $RUN_URL"
          fi
          echo "Posting Slack message: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"${MESSAGE}\"}" "$SLACK_WEBHOOK_URL"
